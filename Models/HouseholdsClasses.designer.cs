#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MelvinYap_GovernmentGrantAPI.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HouseholdsDb")]
	public partial class HouseholdsClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHousehold(Household instance);
    partial void UpdateHousehold(Household instance);
    partial void DeleteHousehold(Household instance);
    partial void InsertFamilyMember(FamilyMember instance);
    partial void UpdateFamilyMember(FamilyMember instance);
    partial void DeleteFamilyMember(FamilyMember instance);
    #endregion
		
		public HouseholdsClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HouseholdsDbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HouseholdsClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HouseholdsClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HouseholdsClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HouseholdsClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Household> Households
		{
			get
			{
				return this.GetTable<Household>();
			}
		}
		
		public System.Data.Linq.Table<FamilyMember> FamilyMembers
		{
			get
			{
				return this.GetTable<FamilyMember>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Household")]
	public partial class Household : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HouseholdId;
		
		private string _HousingType;
		
		private EntitySet<FamilyMember> _FamilyMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHouseholdIdChanging(int value);
    partial void OnHouseholdIdChanged();
    partial void OnHousingTypeChanging(string value);
    partial void OnHousingTypeChanged();
    #endregion
		
		public Household()
		{
			this._FamilyMembers = new EntitySet<FamilyMember>(new Action<FamilyMember>(this.attach_FamilyMembers), new Action<FamilyMember>(this.detach_FamilyMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseholdId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HouseholdId
		{
			get
			{
				return this._HouseholdId;
			}
			set
			{
				if ((this._HouseholdId != value))
				{
					this.OnHouseholdIdChanging(value);
					this.SendPropertyChanging();
					this._HouseholdId = value;
					this.SendPropertyChanged("HouseholdId");
					this.OnHouseholdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string HousingType
		{
			get
			{
				return this._HousingType;
			}
			set
			{
				if ((this._HousingType != value))
				{
					this.OnHousingTypeChanging(value);
					this.SendPropertyChanging();
					this._HousingType = value;
					this.SendPropertyChanged("HousingType");
					this.OnHousingTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Household_FamilyMember", Storage="_FamilyMembers", ThisKey="HouseholdId", OtherKey="HouseholdId")]
		public EntitySet<FamilyMember> FamilyMembers
		{
			get
			{
				return this._FamilyMembers;
			}
			set
			{
				this._FamilyMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FamilyMembers(FamilyMember entity)
		{
			this.SendPropertyChanging();
			entity.Household = this;
		}
		
		private void detach_FamilyMembers(FamilyMember entity)
		{
			this.SendPropertyChanging();
			entity.Household = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FamilyMember")]
	public partial class FamilyMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberId;
		
		private string _Name;
		
		private string _Gender;
		
		private string _MaritalStatus;
		
		private string _SpouseName;
		
		private string _OccupationType;
		
		private System.Nullable<decimal> _AnnualIncome;
		
		private System.DateTime _DOB;
		
		private System.Nullable<int> _HouseholdId;
		
		private EntityRef<Household> _Household;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnMaritalStatusChanging(string value);
    partial void OnMaritalStatusChanged();
    partial void OnSpouseNameChanging(string value);
    partial void OnSpouseNameChanged();
    partial void OnOccupationTypeChanging(string value);
    partial void OnOccupationTypeChanged();
    partial void OnAnnualIncomeChanging(System.Nullable<decimal> value);
    partial void OnAnnualIncomeChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnHouseholdIdChanging(System.Nullable<int> value);
    partial void OnHouseholdIdChanged();
    #endregion
		
		public FamilyMember()
		{
			this._Household = default(EntityRef<Household>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatus", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MaritalStatus
		{
			get
			{
				return this._MaritalStatus;
			}
			set
			{
				if ((this._MaritalStatus != value))
				{
					this.OnMaritalStatusChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatus = value;
					this.SendPropertyChanged("MaritalStatus");
					this.OnMaritalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseName", DbType="VarChar(50)")]
		public string SpouseName
		{
			get
			{
				return this._SpouseName;
			}
			set
			{
				if ((this._SpouseName != value))
				{
					this.OnSpouseNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseName = value;
					this.SendPropertyChanged("SpouseName");
					this.OnSpouseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string OccupationType
		{
			get
			{
				return this._OccupationType;
			}
			set
			{
				if ((this._OccupationType != value))
				{
					this.OnOccupationTypeChanging(value);
					this.SendPropertyChanging();
					this._OccupationType = value;
					this.SendPropertyChanged("OccupationType");
					this.OnOccupationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnualIncome", DbType="Money")]
		public System.Nullable<decimal> AnnualIncome
		{
			get
			{
				return this._AnnualIncome;
			}
			set
			{
				if ((this._AnnualIncome != value))
				{
					this.OnAnnualIncomeChanging(value);
					this.SendPropertyChanging();
					this._AnnualIncome = value;
					this.SendPropertyChanged("AnnualIncome");
					this.OnAnnualIncomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseholdId", DbType="Int")]
		public System.Nullable<int> HouseholdId
		{
			get
			{
				return this._HouseholdId;
			}
			set
			{
				if ((this._HouseholdId != value))
				{
					if (this._Household.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseholdIdChanging(value);
					this.SendPropertyChanging();
					this._HouseholdId = value;
					this.SendPropertyChanged("HouseholdId");
					this.OnHouseholdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Household_FamilyMember", Storage="_Household", ThisKey="HouseholdId", OtherKey="HouseholdId", IsForeignKey=true)]
		public Household Household
		{
			get
			{
				return this._Household.Entity;
			}
			set
			{
				Household previousValue = this._Household.Entity;
				if (((previousValue != value) 
							|| (this._Household.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Household.Entity = null;
						previousValue.FamilyMembers.Remove(this);
					}
					this._Household.Entity = value;
					if ((value != null))
					{
						value.FamilyMembers.Add(this);
						this._HouseholdId = value.HouseholdId;
					}
					else
					{
						this._HouseholdId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Household");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
